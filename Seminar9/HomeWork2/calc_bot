import numexpr as ne
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

def calc_expr(in_str: str):
    tuple_valid = {'0','1','2','3','4','5','6','7','8','9','(',')','+','-','*','/','.','j',' '}
    if  not [s for s in list(in_str) if not (s in tuple_valid)]: 
        return ne.evaluate(in_str)
    else:
        return 'Неверное выражение' 


# a = '(2+7j) + (4-3j)'



# input_str = '(67-12j)+(9-1j)'
# result = calc_expr(input_str)
# result = calc_expr(a)
# print(result)


async def hello_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f'Hello {update.effective_user.first_name}')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = ('Привет! \n' + 
                'Это список команд:\n' + 
                '/hello - Приветствие\n' + 
                '/help - Список команд\n' + 
                '/calc выражение - Вычисление выражения\n'
                )
    await update.message.reply_text(help_text)

async def calc_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
   msg = update.message.text
   print(msg)
   res = calc_expr(msg.partition('/calc ')[2])
   print(res)

   await update.message.reply_text(f'Результат вычисления: {res}')
    
    
# Создаем экземпляр бота
app = ApplicationBuilder().token('5632320403:AAHP0g8O1VtONC_h3kVmFQc57VMFpM79ahM').build()

app.add_handler(CommandHandler("hello", hello_command))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("calc", calc_command))

app.run_polling()


